Responsible for multiplexing and de-multiplexing.
This layer handles these operations through PORT.

PORT:
-----
A 16 bit number that's used to direct traffic to specific services running on a networked computer.

IP          : PORT
192.168.1.1 : 80
This is known as a socket address or socket number.

FTP traditionally listens on PORT 21.

Dissection of TCP Segment:
--------------------------
TCP Segment:
------------
Made up of a TCP header and a data section.


-----------------------------------------------------------------------------------
|           Source Port (16)              |             Destination Port (16)     | 
------------------------------------------ ----------------------------------------
|                              Sequence Number (32)                               |
-----------------------------------------------------------------------------------
|                              Acknowledgement Number (32)                        |
-----------------------------------------------------------------------------------
|   HLEN   |   Empty      | Ctrl Flags    |             Window(16)                |
|   (4)    |    (6)       |    (6)        |                                       |
-----------------------------------------------------------------------------------
|            Checksum(16)                 |             Urgent (16)               |
-----------------------------------------------------------------------------------
|       Options (0 or 16 if any)          |               Padding                 |
-----------------------------------------------------------------------------------
|                              Data payload (varies)                              |
-----------------------------------------------------------------------------------


Source Port:
------------
A source port is a high numbered port chosen from a special section of ports known as ephemeral ports.


Destination Port:
-----------------
The destination port is the port of the service the traffic is intended for.

Sequence Number:
----------------
used to keep track of where in a sequence of TCP segments this one is expected to be

Acknowledgement Number:
-----------------------
 is the number of the next expected segment

HLEN:
-----
that communicates how long the TCP header for this segment is.

Ctrl Flags:
-----------
Reserved for the six TCP control flags.

TCP Window:
-----------
Specifies the range of sequence numbers that might be sent before an acknowledgement is required.

Checksum:
---------
Operates Checksum at the IP and Ethernet level.

Urgent:
-------
Used in conjunction with one of the TCP control flags to point out particular segments that might be more important than others.

Options:
--------
Sometimes used for more complicated flow control protocols.

Padding:
--------
is just a sequence of zeros to ensure that the data payload section begins at the expected location.


************************************************************************************
                TCP Control Flags and the Three-way Handshake
************************************************************************************
Control Flags:
--------------
6 flags.
    1. URG (urgent)
    ---------------
    A value of one here indicates that the segment is considered urgent and that the urgent pointer filed has more data about this.
    
    2.ACK (Acknowledgement):
    ------------------------
     1 means -> acknowledgement number field should be examined.

    3.PSH(push):
    ------------
     This means, that the transmitting device wants the receiving device to push currently- buffered data to the application on the receiving end as soon as possible.
    
    4.RST (Reset):
    --------------
     one of the series in a TCP connection hasn't been able to properly recover from a series of missing or malformed segments. It's a way for one of the partners in a TCP connection to basically say, "Wait, I can't put together what you mean, let's start over from scratch."

    5.SYN (Synchronize):
    --------------------
     It's used when first establishing a TCP connection and make sure the receiving end knows to examine the sequence number field.

    6.FIN (finish):
    ---------------
     1 -> finish data transmitting.




THREE WAY HANDSHAKE:
--------------------
     --------                                     --------
     |      |    -----------SYN----------->       |      |
     |  A   |    <----------SYN/ACK--------       |   B  |
     |      |    ---------------ACK------->       |      |   
     --------                                     --------

Handshake:
----------    
A handshake is a way for two devices to ensure that they're speaking the same protocol and will be able to understand each other.

After 3 Way Handshake TCP connection is established.


FOUR WAY HANDSHAKE:
-------------------
     --------                                     --------
     |      |    <-----------FIN-----------       |      |
     |  A   |    ------------ACK---------->       |   B  |
     |      |    -----------FIN----------->       |      | 
     |      |    <------------ACK----------       |      |
     --------                                     --------




************************************************************************************
                            TCP Socket States
************************************************************************************


Socket:
-------
A socket is the instantiation of an endpoint in a potential TCP connection.

instantiation:
--------------
An instantiation is the actual implementation of something defined elsewhere.


LISTEN:
-------
A TCP socket is ready and listening for incoming connections. Only in (SERVER) side.

SYN_SENT:
---------
A Synchronization request has been sent, but the connection hasn't been established yet. Only in (CLIENT) Side.

SYN-RECEIVED:
-------------
This means that a socket previously in a listener state, has received a synchronization request and sent a SYN/ACK back. But it hasn't received the final ACK from the client yet (SERVER).

ESTABLISHED:
------------
This means that the TCP connection is in working order, and both sides are free to send each other data.  (SERVER & CLIENT)

FIN_WAIT:
---------
This means that a FIN has been sent, but the corresponding ACK from the other end hasn't been received yet.

CLOSE_WAIT:
-----------
This means that the connection has been closed at the TCP layer, but that the application that opened the socket hasn't released its hold on the socket yet.

CLOSED:
-------
This means that the connection has been fully terminated, and that no further communication is possible.



************************************************************************************
            Connection-oriented and Connection-less Protocols
************************************************************************************

A connection-oriented protocol is one that establishes a connection, and uses this to ensure that all data has been properly transmitted. (TCP) protocol.


Connection-less -> UDP
in UDP,
just set a destination port and send the packet.




************************************************************************************
                                    FIREWALL
************************************************************************************

A firewall is just a device that blocks traffic that meets certain criteria.

Firewalls can actually operate at lots of different layers of the network. There are firewalls that can perform inspection of application layer traffic, and firewalls that primarily deal with blocking ranges of IP addresses. The reason we cover firewalls here is that they're most commonly used at the transportation layer.